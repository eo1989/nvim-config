local api = vim.api

-- module used to setup anything when using neovim as a scrollback for the kitty terminal

-- see https://sw.kovidgoyal.net/kitty/conf/#scrollback

-- local INPUT_LINE_NUMBER = tonumber(vim.env.INPUT_LINE_NUMBER)
-- local CURSOR_LINE = tonumber(vim.env.CURSOR_LINE)
-- local CURSOR_COL = tonumber(vim.env.CURSOR_COL)
--
-- vim.w.kitty_scrollback = {
--   input_line_number = INPUT_LINE_NUMBER,
--   cursor_line = CURSOR_LINE,
--   cursor_col = CURSOR_COL,
-- }
--
-- vim.o.signcolumn = 'no'
-- vim.o.scrolloff = 0
--
-- vim.keymap.set('n', 'q', '<Cmd>qa<CR>', { noremap = true })
--
-- do
--   local timer = vim.uv.new_timer()
--   local timer_stopped = false
--
--   local function stop_timer()
--     if timer_stopped then return end
--     timer:stop()
--     timer:close()
--     timer_stopped = true
--   end
--
--   timer:start(
--     0,
--     10,
--     vim.schedule_wrap(function()
--       local ok = pcall(vim.api.nvim_win_set_cursor, 0, {
--         math.max(1, INPUT_LINE_NUMBER) + CUSOR_LINE,
--         CURSOR_COL,
--       })
--       if ok then stop_timer() end
--     end)
--   )
--
--   vim.defer_fn(stop_timer, 2000)
-- end

-- glepnir/nvim/blob/main/lua/internal/kitty.lua
local term_buf = api.nvim_create_buf(true, false)
local term_io = api.nvim_open_term(term_buf, {})
api.nvim_buf_set_keymap(term_buf, 'n', 'q', '<Cmd>q<CR>', {})
local group = api.nvim_create_augroup('kitty+page', {})

api.nvim_create_autocmd('VimEnter', {
  group = group,
  pattern = '*',
  once = true,
  callback = function(ev)
    local nlines = os.getenv('INPUT_LINE_NUMBER') or 0
    local cur_line = os.getenv('CURSOR_LINE') or 0
    local cur_col = os.getenv('CURSOR_COL') or 0

    local current_win = api.nvim_get_current_win()
    for _, line in ipairs(api.nvim_buf_get_lines(ev.buf, 0, -1, false)) do
      api.nvim_chan_send(term_io, line)
      api.nvim_chan_send(term_io, '\r\n')
    end

    term_io = false
    api.nvim_create_autocmd('ModeChanged', {
      group = group,
      pattern = '([nN]:[^vV])|([vV]:[^nN])',
      command = 'stopinsert',
    })
    api.nvim_win_set_buf(current_win, term_buf)
    if nlines ~= vim.NIL and cur_line ~= vim.NIL and cur_col ~= vim.NIL then
      api.nvim_win_set_cursor(current_win, { vim.fn.max { 1, nlines } + cur_line, cur_col > 1 and cur_col - 1 or 0 })
    else
      api.nvim.input([[<C-\><C-n>G]])
    end
    api.nvim_buf_delete(ev.buf, { force = true })
  end,
})

api.nvim_create_autocmd('TextYankPost', {
  command = 'call feedkeys("q")',
})
